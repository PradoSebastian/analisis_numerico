#-------------------------------------------------------------------------------
#                           Taller 1
#-------------------------------------------------------------------------------

#------------------------------
#       Problema 1
#------------------------------

Almacenar <- function(x){
  f<-x
  y=0
  while(f >= 1)
  {
    f<-f/10
    y<-y+1
  }

  z<-f*10000
  m<-z%%1
  z<-z-m
  z<-z/10000
  f<-z*10^y
  E<-abs(x-f)
  
  e<-E/f
  
  cat("El número almacenado es", f, "con un error de redondeo absoluto de", E, "y un error de redondeo relativo de", e)
  
}

Almacenar(536.78)

#------------------------------
#       Problema 2
#------------------------------

RaizCuadrada <- function (n,E,x){
  
  y<-(x+(n/x))/2
  c<-0
  while((abs(x-y))>E)
  {
    x<-y
    y<-(x+(n/x))/2
    c<-c+1
  }
  
  cat("La formula converge en la iteración", c, "con el valor de", y, "para la raiz de", n, "y el valor de y*y es", y*y)
  
}

RaizCuadrada(7, 1e-8, 2.3)

#------------------------------
#       Problema 3
#------------------------------

AproximacionEuler<- function(x)
{
  m<-0
  p<-0
  while (m<=5) 
  {
    p<-p+((x^m)/factorial(m))
    m<-m+1
  }
  p<- p+(((x^m)/factorial(m))*exp(x))
  signif(p, 5)
}

AproximacionEuler(0.5)

#------------------------------
#       Problema 4
#------------------------------

CalculoError_AyR<- function(v, Ev, t, Et)
{
  
  d<-v*t
  
  Ed<-v*Ev+t*Et
  
  ed<-Ev/v+Et/t
  
  cat("La distancia recorrida esta entre", d-Ed, "y", d+Ed, "debido a su error Absoluto de", Ed, "y el error relativo es de", ed*100, "%")
  
}

CalculoError_AyR(4, 0.1, 5, 0.1)

#------------------------------
#       Problema 5
#------------------------------

ResolverPolinomio <- function(x0)
{
  x2<-x0*x0
  x4<-x2*x2
  resultado<-2*x4+3*(x0-x2)-4
  cat("El resultado del polinomio evaluado en x =", x0, "es:", resultado)
}

ResolverPolinomio(-2)

#------------------------------
#       Problema 6
#------------------------------



#-------------------------------------------------------------------------------
#                           Ejercicios raiz con metodos
#-------------------------------------------------------------------------------

g0<- function(x)
{
  x^3+5*x-1
}

g1<- function(x)
{
  (1-x^3)/5
}

g2 <- function(x)
{
  (1-5*x)^(1/3)
}

y<-function(x)
{
  x
}

PuntoFijo<-function(g, x0, tol){
  
  maxI<-100
  l<-0
  repeat
  {
    x1<-g(x0)
    m<-abs(x1-x0)
    x0<-x1
    l<-l+1
    cat("Iteracion:", l, "\b, valor actual:", x1, "Error actual:", m, "\n")
    
    points(l, m, col = "Red")
    
    if( m<tol || l>maxI )
    {
      break;
    }
    
  }

  if(m>tol)
  {
    cat("No hubo convergencia")
  }
  else
  {
    cat("x* es aproximadamente", x1, "con error menor que", tol)
  }
}

plot(g0, xlim = c(0,7), ylim = c(0,0.200001), col = "white", main = "Iteraciones vs Errores", sub = "Punto Fijo", xlab = "Iteraciones", ylab = "Errores")

abline(h = 0, col= "black")

PuntoFijo(g1, 0, 1e-8)


biseccion = function(f, xa, xb, tol)
{
  if( sign(f(xa)) == sign(f(xb)) )
  { 
    stop("f(xa) y f(xb) tienen el mismo signo") 
  }
  # a = min(xa,xb)
  # b = max(xa,xb)
  a = xa
  b = xb
  k = 0
  #Par imprimir estado
  cat("----------------------------------------------------------\n")
  cat(formatC( c("a","b","m","Error est."), width = -15, format = "f", flag = " "), "\n")
  cat("----------------------------------------------------------\n")
  repeat
  {
    m = a + 0.5*(b-a)
    if( f(m)==0 )
    { 
      cat("Cero de f en [",xa,",",xb,"] es: ", m ) 
    }
    if( sign(f(a)) != sign(f(m)) )
    {
      b = m
    } 
    else 
    { 
      a = m 
    }
    dx = (b-a)/2
    # imprimir estado
    cat(formatC( c(a,b,m,dx), digits=7, width = -15, format = "f", flag = " "), "\n")
    k = k+1
    
    points(k,dx, col = "red")
    
    #until
    if( dx < tol )
    {
      cat("----------------------------------------------------------\n\n")
      cat("Cero de f en [",xa,",",xb,"] es approx: ", m, "con error <=", dx, "Iteraciones:" ,k)
      break;
    }
  } #repeat
}

plot(g0, xlim = c(0,27), ylim = c(0,0.3), col = "white", main = "Iteraciones vs Errores", sub = "Biseccion", xlab = "Iteraciones", ylab = "Errores")

abline(h = 0, col= "black")

biseccion(g0, 0, 1, 1e-8)

